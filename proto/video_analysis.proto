syntax = "proto3";

package video_analysis;

// Main service for video analysis
service VideoAnalysisService {
  // Stream chat messages
  rpc Chat(ChatRequest) returns (stream ChatResponse);
  
  // Upload and process video
  rpc UploadVideo(stream VideoChunk) returns (VideoUploadResponse);
  
  // Query video content
  rpc QueryVideo(VideoQuery) returns (stream QueryResponse);
  
  // Generate report
  rpc GenerateReport(ReportRequest) returns (ReportResponse);
  
  // Get video analysis status
  rpc GetAnalysisStatus(StatusRequest) returns (AnalysisStatus);
  
  // Session management
  rpc CreateSession(CreateSessionRequest) returns (SessionResponse);
  rpc ListSessions(ListSessionsRequest) returns (SessionListResponse);
  rpc LoadSession(LoadSessionRequest) returns (SessionDataResponse);
  rpc DeleteSession(DeleteSessionRequest) returns (DeleteSessionResponse);
  rpc UpdateSession(UpdateSessionRequest) returns (UpdateSessionResponse);
}

// Chat messages
message ChatRequest {
  string message = 1;
  string session_id = 2;
  optional string video_id = 3;
}

message ChatResponse {
  string message = 1;
  string sender = 2; // "user", "assistant", "system"
  int64 timestamp = 3;
  optional AgentInfo agent_used = 4;
  optional FileAttachment file_attachment = 5; // Optional file attachment (e.g., PDF/PPTX report)
}

message FileAttachment {
  string filename = 1; // e.g., "Video_Analysis_Report.pdf"
  string file_path = 2; // Full path to the file on backend
  string file_type = 3; // "pdf" or "pptx"
  int64 file_size = 4; // File size in bytes
}

message AgentInfo {
  string agent_name = 1;
  string action = 2;
  map<string, string> metadata = 3;
}

// Video upload
message VideoChunk {
  bytes data = 1;
  string filename = 2;
  int64 chunk_index = 3;
  bool is_final = 4;
  optional string session_id = 5;
}

message VideoUploadResponse {
  string video_id = 1;
  bool success = 2;
  string message = 3;
  VideoMetadata metadata = 4;
}

message VideoMetadata {
  string filename = 1;
  int64 duration_ms = 2;
  int32 width = 3;
  int32 height = 4;
  float fps = 5;
  int64 file_size = 6;
}

// Video query
message VideoQuery {
  string video_id = 1;
  string query = 2;
  string session_id = 3;
}

message QueryResponse {
  string response_chunk = 1;
  bool is_final = 2;
  repeated AgentResult agent_results = 3;
}

message AgentResult {
  string agent_name = 1;
  string result = 2;
  map<string, string> metadata = 3;
  int64 execution_time_ms = 4;
}

// Report generation
message ReportRequest {
  string video_id = 1;
  ReportFormat format = 2;
  optional string template = 3;
  repeated string sections = 4; // e.g., "summary", "transcription", "key_frames"
}

enum ReportFormat {
  PDF = 0;
  PPTX = 1;
}

message ReportResponse {
  bool success = 1;
  string message = 2;
  bytes report_data = 3;
  string filename = 4;
}

// Status tracking
message StatusRequest {
  string video_id = 1;
}

message AnalysisStatus {
  string video_id = 1;
  ProcessingStage stage = 2;
  float progress = 3; // 0.0 to 1.0
  string message = 4;
  repeated StageResult completed_stages = 5;
}

enum ProcessingStage {
  UPLOADED = 0;
  EXTRACTING_AUDIO = 1;
  TRANSCRIBING = 2;
  ANALYZING_FRAMES = 3;
  EXTRACTING_TEXT = 4;
  GENERATING_SUMMARY = 5;
  COMPLETED = 6;
  FAILED = 7;
}

message StageResult {
  ProcessingStage stage = 1;
  bool success = 2;
  string result = 3;
  int64 duration_ms = 4;
}

// Session management
message CreateSessionRequest {
  optional string title = 1; // Optional title for the session
}

message SessionResponse {
  string session_id = 1;
  string title = 2;
  string created_at = 3;
  string updated_at = 4;
  optional string video_id = 5;
  optional string video_filename = 6;
  optional VideoMetadata video_metadata = 7;
}

message ListSessionsRequest {
  // Empty for now, can add filters later
}

message SessionListResponse {
  repeated SessionResponse sessions = 1;
}

message LoadSessionRequest {
  string session_id = 1;
}

message ChatMessage {
  string role = 1; // "user", "assistant", "system"
  string content = 2;
  string timestamp = 3;
}

message SessionDataResponse {
  SessionResponse session = 1;
  repeated ChatMessage messages = 2;
  bool has_cache = 3;
  map<string, string> cache_summary = 4; // tool_name -> cached_at timestamp
}

message DeleteSessionRequest {
  string session_id = 1;
}

message DeleteSessionResponse {
  bool success = 1;
  string message = 2;
}

message UpdateSessionRequest {
  string session_id = 1;
  string title = 2;
}

message UpdateSessionResponse {
  bool success = 1;
  string message = 2;
}
